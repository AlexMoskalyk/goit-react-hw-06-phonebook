{"version":3,"sources":["Components/contactsList/ContactsList.module.css","Components/form/Form.module.css","Components/filter/Filter.module.css","Components/redux/contacts/contacts-types.js","Components/redux/contacts/contacts-actions.js","Components/contactsList/ContacsList.js","Components/filter/Filter.js","Components/form/Form.js","Components/contacts/Contacts.js","App.js","Components/redux/contacts/contacts-reducer.js","Components/redux/store.js","index.js"],"names":["module","exports","ADD_NEW_CONTACT","GET_ALL_CONTACTS","DELETE_CONTACT","CHANGE_FILTER","changeFilter","createAction","deleteContact","addNewContact","contact","payload","id","nanoid","contactName","contactNumber","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","includes","ContactList","dispatch","useDispatch","contacts","useSelector","state","items","error","className","styles","ul","map","item","li","type","onClick","Filter","label","onChange","e","value","target","pattern","title","required","initialState","Form","useState","setContact","onHandleChange","name","prev","container","onSubmit","preventDefault","some","alert","formBtn","Contacts","getAllContacts","App","createReducer","action","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","rootReducer","contactsReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","process","data","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.68bfad91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"ContactsList_li__IA_a8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1n3wB\",\"formLabel\":\"Form_formLabel__3iYam\",\"formInput\":\"Form_formInput__1MOtU\",\"formBtn\":\"Form_formBtn__1ptU4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__39eBw\"};","const ADD_NEW_CONTACT = \"contacts/addNewContact\";\r\nconst GET_ALL_CONTACTS = \"contacts/getContacts\";\r\nconst DELETE_CONTACT = \"contacts/deleteContact\";\r\nconst CHANGE_FILTER = \"contacts/changeFilter\";\r\n\r\nexport { ADD_NEW_CONTACT, GET_ALL_CONTACTS, DELETE_CONTACT, CHANGE_FILTER };\r\n","// import { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport {\r\n  ADD_NEW_CONTACT,\r\n  GET_ALL_CONTACTS,\r\n  DELETE_CONTACT,\r\n  CHANGE_FILTER,\r\n} from \"../contacts/contacts-types\";\r\n\r\nimport { createAction, nanoid } from \"@reduxjs/toolkit\";\r\n\r\n//=======================toolkit========================\r\n\r\nexport const changeFilter = createAction(CHANGE_FILTER);\r\nexport const deleteContact = createAction(DELETE_CONTACT);\r\nexport const getAllContacts = createAction(GET_ALL_CONTACTS);\r\nexport const addNewContact = createAction(ADD_NEW_CONTACT, (contact) => {\r\n  return {\r\n    payload: {\r\n      id: nanoid(),\r\n      contactName: contact.contactName,\r\n      contactNumber: contact.contactNumber,\r\n    },\r\n  };\r\n});\r\n\r\n//=======================redux===========================\r\n// export const addNewContact = (contact) => {\r\n//   return {\r\n//     type: ADD_NEW_CONTACT,\r\n//     payload: {\r\n//       id: uuidv4(),\r\n//       contactName: contact.contactName,\r\n//       contactNumber: contact.contactNumber,\r\n//     },\r\n//   };\r\n// };\r\n\r\n// export const getAllContacts = (contacts) => {\r\n//   return {\r\n//     type: GET_ALL_CONTACTS,\r\n//     payload: contacts,\r\n//   };\r\n// };\r\n\r\n// export const deleteContact = (id) => {\r\n//   return {\r\n//     type: DELETE_CONTACT,\r\n//     payload: id,\r\n//   };\r\n// };\r\n\r\n// export const changeFilter = (value) => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import React from \"react\";\r\n// import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../contactsList/ContactsList.module.css\";\r\nimport { deleteContact } from \"../redux/contacts/contacts-actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst ContactList = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector((state) =>\r\n    getVisibleContacts(state.contacts.items, state.contacts.filter)\r\n  );\r\n \r\n  const error = useSelector((state) => state.contacts.error);\r\n  return (\r\n    <>\r\n     \r\n      {error && <h2>Somthing was wrong !</h2>}\r\n      <ul className={styles.ul}>\r\n        {contacts &&\r\n          contacts.map((item) => (\r\n            <li className={styles.li} key={item.id}>\r\n              <span>{item.contactName}</span>\r\n              <span>{item.contactNumber}</span>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => dispatch(deleteContact(item.id))}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allContacts.filter((contact) =>\r\n    contact.contactName.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: getVisibleContacts(state.contacts.items, state.contacts.filter),\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//   deleteContact,\r\n// };\r\n\r\nContactList.propTypes = {\r\n  allContacts: PropTypes.string,\r\n  filter: PropTypes.string,\r\n};\r\nexport default ContactList;\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\n// import { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.css\";\r\nimport { changeFilter } from \"../redux/contacts/contacts-actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n  const onHandleChange = (e) => {\r\n    const { value } = e.target;\r\n    dispatch(changeFilter(value));\r\n  };\r\n\r\n  return (\r\n    <label className={styles.label}>\r\n      Search\r\n      <input\r\n        onChange={onHandleChange}\r\n        value={filter}\r\n        type=\"text\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   value: state.contacts.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//   onChange: (e) => changeFilter(e.target.value),\r\n// };\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\nexport default Filter;\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { useState } from \"react\";\r\n// import { connect } from \"react-redux\";\r\nimport { addNewContact } from \"../redux/contacts/contacts-actions\";\r\nimport styles from \"./Form.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst initialState = {\r\n  contactName: \"\",\r\n  contactNumber: \"\",\r\n};\r\n\r\nconst Form = () => {\r\n  const [contact, setContact] = useState(initialState);\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const isThereContact = (contactName, contactNumber) => {\r\n    return (\r\n      contacts.some(\r\n        (contact) =>\r\n          contact.contactName.toLowerCase() === contactName.toLowerCase()\r\n      ) ||\r\n      contacts.some(\r\n        (contact) =>\r\n          contact.contactNumber.toLowerCase() === contactNumber.toLowerCase()\r\n      )\r\n    );\r\n  };\r\n\r\n  const onHandleChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    setContact((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const reset = () => {\r\n    setContact(initialState);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isThereContact(contact.contactName, contact.contactNumber)) {\r\n      return alert(\r\n        `${contact.contactName} or ${contact.contactNumber} has been already in contact list  `\r\n      );\r\n    }\r\n\r\n    dispatch(addNewContact(contact));\r\n\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={styles.container} onSubmit={handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            value={contact.contactName}\r\n            onChange={onHandleChange}\r\n            type=\"text\"\r\n            name=\"contactName\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Telefon\r\n          <input\r\n            value={contact.contactNumber}\r\n            onChange={onHandleChange}\r\n            type=\"tel\"\r\n            name=\"contactNumber\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button className={styles.formBtn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contatcs: state.contacts.items,\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//   addNewContact,\r\n// };\r\n\r\nForm.propTypes = {\r\n  contatcs: PropTypes.array,\r\n  addNewContact: PropTypes.func,\r\n};\r\nexport default Form;\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import React from \"react\";\r\n// import { connect } from \"react-redux\";\r\n// import { load, save } from \"../../services/localStorage\";\r\nimport ContactList from \"../contactsList/ContacsList\";\r\nimport Filter from \"../filter/Filter\";\r\nimport Form from \"../form/Form\";\r\n// import {\r\n//   addNewContact,\r\n//   getAllContacts,\r\n// } from \"../redux/contacts/contacts-actions\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nconst Contacts = ({ contacts, getAllContacts }) => {\r\n  // useEffect(() => {\r\n  //   const newContacts = load(\"contacts\");\r\n  //   getAllContacts(newContacts);\r\n  // }, [getAllContacts]);\r\n\r\n  // useEffect(() => {\r\n  //   save(\"contacts\", contacts);\r\n  // }, [contacts]);\r\n\r\n  return (\r\n    <>\r\n      <Form />\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\n// const mapDispatchToProps = {\r\n//   addNewContact,\r\n//   getAllContacts,\r\n// };\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     contacts: state.contacts.items,\r\n//   };\r\n// };\r\n\r\n// Contacts.propTypes = {\r\n//   contacts: PropTypes.array,\r\n//   getAllContacts: PropTypes.func,\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\nexport default Contacts;\r\n","import React from \"react\";\r\nimport Contacts from \"./Components/contacts/Contacts\";\r\n\r\nconst App = () => {\r\n  return <Contacts />;\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport {\r\n  ADD_NEW_CONTACT,\r\n  GET_ALL_CONTACTS,\r\n  DELETE_CONTACT,\r\n  CHANGE_FILTER,\r\n} from \"../contacts/contacts-types\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\n//==============================toolkit============================\r\n\r\nconst items = createReducer(\r\n  [\r\n    { id: \"id-1\", contactName: \"Rosie Simpson\", contactNumber: \"4591256\" },\r\n    { id: \"id-2\", contactName: \"Hermione Kline\", contactNumber: \"4438912\" },\r\n    { id: \"id-3\", contactName: \"Eden Clements\", contactNumber: \"6451779\" },\r\n    { id: \"id-4\", contactName: \"Annie Copeland\", contactNumber: \"2279126\" },\r\n  ],\r\n  {\r\n    [ADD_NEW_CONTACT]: (state, action) => [...state, action.payload],\r\n    [GET_ALL_CONTACTS]: (state, action) => action.payload,\r\n    [DELETE_CONTACT]: (state, action) =>\r\n      state.filter((contact) => contact.id !== action.payload),\r\n    [GET_ALL_CONTACTS]: (state, action) => action.payload,\r\n  }\r\n);\r\n\r\nconst filter = createReducer(\"\", {\r\n  [CHANGE_FILTER]: (_, action) => action.payload,\r\n});\r\n\r\n//===========================redux======================================\r\n// const items = (\r\n//   state = [\r\n//     { id: \"id-1\", contactName: \"Rosie Simpson\", contactNumber: \"4591256\" },\r\n//     { id: \"id-2\", contactName: \"Hermione Kline\", contactNumber: \"4438912\" },\r\n//     { id: \"id-3\", contactName: \"Eden Clements\", contactNumber: \"6451779\" },\r\n//     { id: \"id-4\", contactName: \"Annie Copeland\", contactNumber: \"2279126\" },\r\n//   ],\r\n\r\n//   action\r\n// ) => {\r\n//   switch (action.type) {\r\n//     case \"contacts/addNewContact\":\r\n//       return [...state, action.payload];\r\n//     case \"contacts/getContacts\":\r\n//       return action.payload;\r\n//     case \"contacts/deleteContact\":\r\n//       return state.filter((contact) => contact.id !== action.payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case \"contacts/changeFilter\":\r\n//       return action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","// import { combineReducers } from \"redux\";===REDUX\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";===REDUX\r\nimport contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\n//======================toolkit=======================\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\nconst persistedReducer = persistReducer(contactsPersistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n//========================redux==========================\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\nconst data = { store, persistor };\r\n\r\nexport default data;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport store from \"./Components/redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}